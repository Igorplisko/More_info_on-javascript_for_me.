1. Как проверить, является ли значение ложным ?
   Следует использовать функцию Boolean или оператор "!!"(двойное отрицание).



2. JavaScript определяет 7 типов: данных:
null
undefined
boolean
string
number
object
symbol(добавлен в ES6)

3. У стрелочных функций есть два основных преимущества перед традиционными функциями.Первое — это очень удобный и компактный синтаксис.Второе заключается в том, что подход к работе со значением this в стрелочных функциях выглядит интуитивно понятнее, чем в обычных функциях.


4.Что такое поднятие(Hoisting) ?
   Поднятие — это термин, описывающий подъем переменной или функции в глобальную или функциональную области видимости.

  
  
   5.Для чего используется директива «use strict» ?
«use strict» — это директива ES5, которая заставляет весь наш код или код отдельной функции выполняться в строгом режиме.Строгий режим вводит некоторые ограничения по написанию кода, тем самым позволяя избегать ошибок на ранних этапах.


6. Что такое IIFE ?

   IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления.Для создания IIFE необходимо обернуть функцию в круглые скобки(оператор группировки), превратив ее в выражение, и затем вызвать ее с помощью еще одних круглых скобок.Это выглядит так: (function () { })().


7. Что такое промисы(Promises) ?

   Промисы — это один из приемов работы с асинхронным кодом в JS.Они возвращают результат асинхронной операции.Промисы были придуманы для решения проблемы так называемого «ада функций обратного вызова».
















//!--------------------------------------------------------------------
1.В чем разница между null и undefined ?
   Они являются ложными значениями, т.е.результатом их преобразования в логическое значение с помощью Boolean() или оператора "!!" является false:
console.log(!!null) // false
console.log(!!undefined) // false
console.log(Boolean(null)) // false
console.log(Boolean(undefined)) // false

undefined(«неопределенный») представляет собой значение по умолчанию:
--переменной, которой не было присвоено значения, т.е.объявленной, но не инициализированной переменной;
--функции, которая ничего не возвращает явно, например, console.log(1);
--несуществующего свойства объекта.

В указанных случаях движок JS присваивает значение undefine:
let _thisIsUndefined
const doNothing = () => { }
const someObj = {
   a: 'ay',
   b: 'bee',
   c: 'si'
}
console.log(_thisIsUndefined) // undefined
console.log(doNothing()) // undefined
console.log(someObj['d']) // undefined

null — это «значение отсутствия значения».null — это значение, которое присваивается переменной явно.В примере ниже мы получаем null, когда метод fs.readFile отрабатывает без ошибок:

fs.readFile('path/to/file', (e, data) => {
   console.log(e) // здесь мы получаем null
   if (e) {
      console.log(e)
   }
   console.log(data)
})

При сравнении null и undefined мы получаем true, когда используем оператор "==", и false при использовании оператора "===".О том, почему так происходит, см.ниже.

   console.log(null == undefined) // true
console.log(null === undefined) // false


//!--------------------------------------------------


2.Что такое область видимости(Scope) ?

   Область видимости — это место, где(или откуда) мы имеем доступ к переменным или функциям.JS имеем три типа областей видимости: глобальная, функциональная и блочная(ES6).

Глобальная область видимости — переменные и функции, объявленные в глобальном пространстве имен, имеют глобальную область видимости и доступны из любого места в коде.

// глобальное пространство имен
var g = 'global'

function globalFunc() {
   function innerFunc() {
      console.log(g) // имеет доступ к переменной g, поскольку она является глобальной
   }
   innerFunc()
}

Функциональная область видимости(область видимости функции) — переменные, функции и параметры, объявленные внутри функции, доступны только внутри этой функции.

function myFavouriteFunc(a) {
   if (true) {
      var b = 'Hello ' + a
   }
   return b
}
myFavouriteFunc('World')

console.log(a) // Uncaught ReferenceError: a is not defined
console.log(b) // не выполнится

Блочная область видимости — переменные(объявленные с помощью ключевых слов «let» и «const ») внутри блока ({}), доступны только внутри него.

function testBlock() {
   if (true) {
      let z = 5
   }
   return z
}

testBlock() // Uncaught ReferenceError: z is not defined

//!--------------------------------------------------