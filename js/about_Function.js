1.Функции в JavaScript
Функции - ключевая концепция в JavaScript.Важнейшей особенностью языка является первоклассная поддержка функций.Любая функция это объект, и следовательно ею можно манипулировать как объектом, в частности

--передавать как аргумент и возвращать в качестве результата при вызове других функций(функций высшего порядка);
--создавать анонимно и присваивать в качестве значений переменных или свойств объектов.
//?------------------------------------------------------------------------------------------------

2.--Для понимания работы функций необходимо(и достаточно ?) иметь представление о следующих моментах:
1.способы объявления
2.способы вызова
3.параметры и аргументы вызова(arguments)
4.область данных(Scope) и замыкания(Closures)
5.объект привязки(this)
6.возвращаемое значение(return)
7.исключения(throw)
8.использование в качестве конструктора объектов
//?------------------------------------------------------------------------------------------


3.--Сравнение Function Decaration и Function Expression
Function Declaration - функция, объявленная в основном потоке кода.
Function Expression - объявление функции в контексте какого - либо выражения, например присваивания.
Несмотря на немного разный вид, по сути две эти записи делают одно и то же:

1.Основное отличие между ними: функции, объявленные как Function Declaration, создаются интерпретатором до выполнения кода.

Поэтому их можно вызвать до объявления, например:

sayHi("Вася"); // Привет, Вася

function sayHi(name) {
   console.log("Привет, " + name);              // Function Declaration
}
А если бы это было объявление Function Expression, то такой вызов бы не сработал:

sayHi("Вася"); // ошибка!

var sayHi = function (name) {
   console.log("Привет, " + name);             // Function Expression
}
   //?------------------------------------------------------------------------------------------------


   - Function.prototype.apply()
Вызывает функцию и устанавливает this в контекст предоставленного значения; аргументы передаются объектом Array.

- Function.prototype.bind()
Создаёт новую функцию, которая, при вызове, самостоятельно вызывает эту функцию в контексте предоставленного значения, с данной последовательностью аргументов, предшествующих любым аргументам, переданным в новую функцию при её вызове.Устанавливает this в контекст предоставленного значения.

- Function.prototype.call()
Вызывает(выполняет) функцию и устанавливает this в контекст предоставленного значения; аргументы передаются как есть.

 1.--В чем разница между методами call и apply ?

   Отличие между call и apply состоит в том, как мы передаем аргументы в вызываемой функции.В apply аргументы передаются в виде массива, в call — через запятую.

2.--Для чего используется метод Function.prototype.bind ?

   Bind возвращает новую функцию, значением this которой является объект, указанный в качестве первого параметра.В отличие от bind, call и apply сразу же вызывают функцию.